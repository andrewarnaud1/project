“””
Gestionnaire des erreurs avec mécanisme de retry complet.
Termine le test actuel sans enregistrer et relance de zéro.
“””

import re
import os
import sys
import time
import logging
import subprocess
import pytest
from playwright.sync_api import Page

from src.utils.utils import contexte_actuel
from src.utils.screenshot_manager import take_screenshot
from src.utils.timeout_checker import VerificateurTimeout

LOGGER = logging.getLogger(**name**)

def gestion_exception(execution, etape, page: Page, exception: Exception):
“”“Gestion des exceptions avec possibilité de retry sans sauvegarde”””
methode_name = contexte_actuel()
LOGGER.debug(”[%s] –– DEBUT ––”, methode_name)

```
# Vérifier si on doit faire un retry AVANT tout traitement
if should_retry_execution(execution, exception):
    LOGGER.warning("🔄 Échec détecté - Abandon du test actuel et relance de zéro")
    
    # Screenshot rapide pour debug (optionnel)
    try:
        take_screenshot(execution, etape, page, erreur=True)
    except:
        pass  # Ignorer les erreurs de screenshot
    
    # Fermer immédiatement tout et relancer
    terminate_and_restart(execution, exception)
    return  # Ne jamais arriver ici mais par sécurité

# Pas de retry : traitement normal de l'erreur
# URL pour le rapport
if len(execution.etapes) == 0:
    url = execution.config.get("url_initiale")
else:
    url = page.url

# Construire le commentaire d'erreur
commentaire = construire_commentaire_erreur(
    etape.etape["nom"], execution, url, exception, page
)

LOGGER.error(" %s", commentaire)
LOGGER.error(" Exception: %s", exception)

etape.finalise(execution.compteur_etape, 2, url, commentaire)
take_screenshot(execution, etape, page, erreur=True)
LOGGER.info("[%s] Appel de pytest.exit(2)", methode_name)
pytest.exit(2)
```

def should_retry_execution(execution, exception: Exception) -> bool:
“””
Détermine si on doit abandonner le test actuel et relancer de zéro
“””
# Vérifier si les retries sont activés
max_retries = int(os.environ.get(“MAX_RETRIES”, “0”))
if max_retries <= 0:
return False

```
# Vérifier le nombre de tentatives déjà effectuées
current_retry = int(os.environ.get("CURRENT_RETRY", "0"))
if current_retry >= max_retries:
    LOGGER.warning("[RETRY] Nombre maximum de tentatives atteint (%d)", max_retries)
    return False

# Conditions pour déclencher un retry
exception_str = str(exception).lower()
retry_conditions = [
    "timeout" in exception_str,
    "connection refused" in exception_str,
    "network" in exception_str,
    "502" in exception_str,  # Bad Gateway
    "503" in exception_str,  # Service Unavailable
    "504" in exception_str,  # Gateway Timeout
    "ns_error" in exception_str,  # Erreurs Firefox
    "net::" in exception_str,  # Erreurs réseau Chrome
    "browser disconnected" in exception_str,
    "page crash" in exception_str,
]

should_retry = any(retry_conditions)

if should_retry:
    LOGGER.info("[RETRY] Condition de retry détectée: %s", exception_str[:100])
else:
    LOGGER.debug("[RETRY] Aucune condition de retry détectée")

return should_retry
```

def terminate_and_restart(execution, exception: Exception):
“””
Termine immédiatement le test actuel et relance de zéro
“””
current_retry = int(os.environ.get(“CURRENT_RETRY”, “0”))
max_retries = int(os.environ.get(“MAX_RETRIES”, “0”))
retry_delay = int(os.environ.get(“RETRY_DELAY”, “10”))

```
LOGGER.warning(
    "[RETRY] 🛑 ABANDON du test actuel - Tentative %d/%d",
    current_retry + 1,
    max_retries
)
LOGGER.warning("[RETRY] Cause: %s", str(exception)[:100])

try:
    # Fermer immédiatement le navigateur pour libérer les ressources
    if hasattr(execution, 'config') and 'page' in locals():
        try:
            page.context.browser.close()
            LOGGER.info("[RETRY] Navigateur fermé")
        except:
            pass
    
    # Forcer la fermeture des processus navigateur
    cleanup_browser_processes()
    
except Exception as e:
    LOGGER.warning("[RETRY] Erreur lors du nettoyage: %s", e)

# Attendre un peu pour que tout se nettoie
LOGGER.info("[RETRY] Attente de %d secondes avant relance...", retry_delay)
time.sleep(retry_delay)

# Relancer complètement
restart_from_zero()
```

def cleanup_browser_processes():
“”“Force la fermeture de tous les processus navigateur”””
processes = [‘firefox’, ‘chromium’, ‘chrome’, ‘msedge’, ‘playwright’]

```
for process_name in processes:
    try:
        if os.name == 'nt':  # Windows
            subprocess.run(
                ['taskkill', '/F', '/IM', f'{process_name}.exe'],
                capture_output=True,
                check=False
            )
        else:  # Unix/Linux
            subprocess.run(
                ['pkill', '-f', process_name],
                capture_output=True,
                check=False
            )
    except:
        pass
```

def restart_from_zero():
“””
Relance complètement l’exécution dans un nouveau processus
SANS sauvegarder les résultats du test actuel
“””
LOGGER.info(”[RETRY] 🔄 RELANCE COMPLÈTE DE ZÉRO”)

```
try:
    # Préparer les arguments pour le nouveau processus
    original_args = sys.argv.copy()
    
    # Préparer l'environnement pour la nouvelle tentative
    env = os.environ.copy()
    current_retry = int(env.get('CURRENT_RETRY', '0')) + 1
    env['CURRENT_RETRY'] = str(current_retry)
    
    # Ajouter un identifiant unique pour cette tentative
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    env['EXECUTION_ID'] = f"retry_{current_retry}_{timestamp}"
    
    LOGGER.info("[RETRY] Nouvelle tentative: %d", current_retry)
    LOGGER.info("[RETRY] ID d'exécution: %s", env['EXECUTION_ID'])
    LOGGER.info("[RETRY] Commande: %s", ' '.join(original_args))
    
    # Lancer le nouveau processus
    result = subprocess.run(
        original_args,
        env=env,
        capture_output=False,  # Garder la sortie dans le terminal
    )
    
    # Sortir avec le code de retour du nouveau processus
    LOGGER.info("[RETRY] Processus terminé avec le code: %d", result.returncode)
    os._exit(result.returncode)  # Sortie immédiate sans cleanup Python
    
except Exception as e:
    LOGGER.error("[RETRY] Erreur lors de la relance: %s", e)
    os._exit(1)  # Sortie d'urgence
```

def construire_commentaire_erreur(
nom_etape: str, execution, url: str, exception: Exception, page: Page
) -> str:
“”“Construit le commentaire d’erreur en vérifiant la cause”””

```
base_commentaire = f"KO - Etape {execution.compteur_etape} {nom_etape}"
message_exception = str(exception)

# Vérifier si c'est un timeout
if est_timeout(message_exception):
    try:
        verificateur = VerificateurTimeout(execution.config)

        if verificateur.patterns_charges:
            cause_timeout = verificateur.verifier_cause_timeout(page)

            if cause_timeout:
                return f"{base_commentaire} : Timeout dû à une erreur - {cause_timeout}"
            else:
                message_nettoye = nettoyer_message_timeout(message_exception)
                return f"{base_commentaire} : {message_nettoye}"
        else:
            message_nettoye = nettoyer_message_timeout(message_exception)
            return f"{base_commentaire} : {message_nettoye} (Aucun fichier d'erreur disponible)"

    except Exception as e:
        LOGGER.error("[VerificateurTimeout] Erreur : %s", e)
        message_nettoye = nettoyer_message_timeout(message_exception)
        return f"{base_commentaire} : {message_nettoye} (Erreur vérification)"
else:
    message_nettoye = nettoyer_message_erreur(message_exception, execution, url)
    return f"{base_commentaire} : {message_nettoye}"
```

def est_timeout(message_exception: str) -> bool:
“”“Vérifie si l’exception est un timeout”””
mots_cles_timeout = [
“timeout”, “timed out”, “exceeded”, “délai”, “dépassé”,
“wait_for”, “waiting for”, “attente”,
]
message_minuscule = message_exception.lower()
return any(mot_cle in message_minuscule for mot_cle in mots_cles_timeout)

def nettoyer_message_timeout(message_exception: str) -> str:
“”“Nettoie et traduit les messages de timeout”””
message = nettoyer_message_base(message_exception)
message = re.sub(r”Locator.wait_for:”, “Attente élément :”, message)
message = re.sub(r”exceeded”, “dépassé”, message)
message = re.sub(r”to be visible”, “visible”, message)
message = re.sub(r”Call log:.*”, “”, message)
message = re.sub(r”\s+”, “ “, message).strip()
return message

def nettoyer_message_erreur(message: str, execution, url: str) -> str:
“”“Nettoie les messages d’erreur”””
if “Page.goto” in message:
return nettoyer_erreur_navigation(message, execution, url)
elif “Locator.wait_for” in message:
return nettoyer_erreur_attente(message)
elif “Locator expected to be visible” in message:
return nettoyer_erreur_visibilite(message)
else:
return nettoyer_message_base(message)

def nettoyer_erreur_navigation(message: str, execution, url: str) -> str:
“”“Nettoie les erreurs de navigation”””
message = re.sub(r”^Page.goto:”, f”Ouverture {url} : “, message)
message = re.sub(r”Call log:.*$”, “”, message, flags=re.DOTALL)

```
traductions = {
    "NS_ERROR_PROXY_CONNECTION_REFUSED": "Connexion au proxy refusée",
    "NS_ERROR_UNKNOWN_PROXY_HOST": "Nom d'hôte du proxy introuvable",
    "NS_ERROR_CONNECTION_REFUSED": "Connexion au serveur refusée",
    "NS_ERROR_NET_TIMEOUT": "La connexion a expiré",
    "NS_ERROR_UNKNOWN_HOST": "Nom d'hôte introuvable",
    "SSL_ERROR_UNKNOWN": "Echec de connexion sécurisée",
}

for code, traduction in traductions.items():
    message = re.sub(rf"\b{code}\b", traduction, message)

return message.strip()
```

def nettoyer_erreur_attente(message: str) -> str:
“”“Nettoie les erreurs d’attente d’élément”””
message = re.sub(r”^Locator.wait_for:”, “Attente élément :”, message)
message = re.sub(r”exceeded”, “dépassé”, message)
message = re.sub(r”to be visible”, “visible”, message)
message = re.sub(r”Call log:.*”, “”, message)
return message.strip()

def nettoyer_erreur_visibilite(message: str) -> str:
“”“Nettoie les erreurs de visibilité”””
message = re.sub(r”Locator expected to be visible”, “Élément attendu visible”, message)
message = re.sub(r”Actual value:”, “Valeur obtenue :”, message)  
message = re.sub(r”Call log:.*”, “”, message)
return message.strip()

def nettoyer_message_base(message: str) -> str:
“”“Nettoyage de base pour tous les messages”””
return (
message.replace(”\n”, “ “)
.replace(”\r”, “ “)
.replace(”\”, “/”)
.replace(’”’, “’”)
.strip()
)