classDiagram
%% Définition des classes du package Noyau
class ExecuteurScenario {
-configuration: Configuration
-donnees_scenario: dict
-etapes: List[Etape]
-gestionnaire_navigateur: GestionnaireNavigateur
+executer() ResultatExecution
+ajouter_etape(etape: Etape) void
+finaliser() ResultatExecution
}

```
class Configuration {
    -variables_environnement: dict
    -configuration_fichier: dict
    -donnees_api: dict
    +charger_environnement() dict
    +charger_configuration_fichier() dict
    +fusionner_donnees_api(donnees_api: dict) void
    +obtenir(cle: str, defaut) Any
    +__getitem__(cle: str) Any
}

class Etape {
    -nom: str
    -ordre: int
    -heure_debut: float
    -duree: float
    -statut: StatutEtape
    -url: str
    -commentaire: str
    -captures_ecran: List[str]
    +demarrer() void
    +terminer(statut: StatutEtape, commentaire: str) void
    +prendre_capture_ecran(page: Page, erreur: bool) str
}

class StatutEtape {
    <<enumeration>>
    SUCCES = 0
    AVERTISSEMENT = 1
    ERREUR = 2
    INCONNU = 3
}

class ResultatExecution {
    -nom_scenario: str
    -heure_debut: datetime
    -duree: float
    -statut: StatutEtape
    -etapes: List[Etape]
    -metadonnees: dict
    +vers_dictionnaire() dict
    +sauvegarder_json(chemin_fichier: str) void
    +obtenir_resume() dict
}

%% Définition des classes du package Navigateur
class GestionnaireNavigateur {
    -contexte_playwright: BrowserContext
    -page: Page
    -configuration: Configuration
    +lancer() Page
    +fermer() void
    +prendre_capture_ecran(chemin: str) str
    +obtenir_page() Page
}

class GestionnaireCaptureEcran {
    -configuration: Configuration
    -compteur: int
    +prendre(page: Page, etape: Etape, erreur: bool) str
    +ajouter_decorations(page: Page, titre: str) void
    +supprimer_decorations(page: Page) void
}

%% Définition des classes du package API
class ClientAPI {
    <<interface>>
    +obtenir_scenario(id_scenario: str) dict
    +envoyer_resultats(donnees: dict) bool
    +obtenir_derniere_execution(id_scenario: str) dict
}

class ClientAPIHttp {
    -url_base: str
    -timeout: int
    +obtenir_scenario(id_scenario: str) dict
    +envoyer_resultats(donnees: dict) bool
    +obtenir_derniere_execution(id_scenario: str) dict
}

%% Définition des classes du package Validation
class ValidateurPlanning {
    -donnees_planning: dict
    +valider_heure_execution() bool
    +verifier_jours_feries() bool
    +verifier_creneaux_horaires() bool
}

class VerificateurCreneauxHoraires {
    +est_dans_creneau(heure_actuelle: time, creneaux: List[dict]) bool
    +valider_format_creneau(creneau: dict) bool
}

class VerificateurJoursFeries {
    +est_jour_ferie(date: datetime) bool
    +valider_flag_ferie(flag: bool, est_ferie: bool) bool
}

%% Définition des classes du package Actions.Web
class ActionsWeb {
    +cliquer(localisateur: str, page: Page) bool
    +remplir(localisateur: str, texte: str, page: Page) bool
    +attendre(localisateur: str, page: Page, timeout: int) bool
    +naviguer(url: str, page: Page) bool
}

%% Définition des classes du package Actions.Exadata
class ActionsExadata {
    +cliquer_image(chemin_image: str, page: Page) bool
    +saisir_texte(chemin_image: str, texte: str, page: Page) bool
    +attendre_image(chemin_image: str, page: Page) bool
    +trouver_coordonnees_image(chemin_image: str, capture: str) Tuple[int, int]
}

class ComparateurImages {
    +trouver_modele(modele: str, capture: str, confiance: float) Optional[Tuple[int, int]]
    +prendre_capture_ecran(page: Page) str
    +comparer_images(img1: str, img2: str) float
}

%% Définition des classes du package Utilitaires
class ChargeurFichiers {
    +charger_yaml(chemin_fichier: str) dict
    +charger_json(chemin_fichier: str) dict
    +assurer_repertoire(chemin: str) void
}

class Chiffrement {
    +dechiffrer_donnees_utilisateur(donnees_chiffrees: dict) str
    +chiffrer_donnees_sensibles(donnees: str) dict
}

class GestionnaireErreurs {
    +gerer_timeout(exception: Exception, page: Page) str
    +nettoyer_message_erreur(message: str) str
    +est_erreur_application(page: Page) bool
}

%% Relations principales
ExecuteurScenario --> Configuration : utilise
ExecuteurScenario --> Etape : contient
ExecuteurScenario --> GestionnaireNavigateur : utilise
ExecuteurScenario --> ResultatExecution : produit
ExecuteurScenario --> ClientAPI : utilise
ExecuteurScenario --> ValidateurPlanning : utilise

Etape --> StatutEtape : a un
Etape --> GestionnaireCaptureEcran : utilise

GestionnaireNavigateur --> Configuration : utilise
GestionnaireNavigateur --> GestionnaireCaptureEcran : utilise

Configuration --> ChargeurFichiers : utilise
Configuration --> ClientAPI : utilise

ValidateurPlanning --> VerificateurCreneauxHoraires : utilise
ValidateurPlanning --> VerificateurJoursFeries : utilise

ActionsExadata --> ComparateurImages : utilise
ActionsWeb --> GestionnaireNavigateur : utilise

GestionnaireErreurs --> Configuration : utilise

ClientAPIHttp ..|> ClientAPI : implémente

%% Groupes de packages (pour la couleur/organisation)
note for ExecuteurScenario "Package: Noyau\nClasses principales du simulateur"
note for GestionnaireNavigateur "Package: Navigateur\nGestion du navigateur et captures"
note for ClientAPI "Package: API\nCommunication avec l'API externe"
note for ValidateurPlanning "Package: Validation\nValidation des créneaux d'exécution"
note for ActionsWeb "Package: Actions.Web\nActions pour scénarios web classiques"
note for ActionsExadata "Package: Actions.Exadata\nActions par reconnaissance d'image"
note for ChargeurFichiers "Package: Utilitaires\nOutils transversaux"
```