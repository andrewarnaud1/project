#!/usr/bin/bash

# Version debug pour identifier le problème

# === FONCTIONS UTILITAIRES ===

errorMsg() {
echo -e “[Erreur] ${*}” >&2
}

die() {
errorMsg “${*}”
exit 1
}

infoMsg() {
echo -e “[Info] ${*}”
}

# === VARIABLES (selon ton log) ===

export NOM_SCENARIO=“aai2_consultation_demande”
export TYPE_SCENARIO=“exadata”
export PLATEFORME=“prod”
export NAVIGATEUR=“firefox”
export HEADLESS=“false”
export LECTURE=“true”
export INSCRIPTION=“true”
export SIMU_PATH=”/home/aarnaud02/Bureau/simulateur_v6”
export SCENARIOS_PATH=”/home/aarnaud02/Bureau/scenarios_v6”
export OUTPUT_PATH=”/home/aarnaud02/Bureau/simulateur_v6/output”

# === DEBUG: VERIFICATION DES FICHIERS ===

infoMsg “=== DEBUG: VERIFICATION DES FICHIERS ===”

# 1. Vérifier la structure des fichiers

SCENARIO_PYTHON=”${SIMU_PATH}/scenarios_python/${NOM_SCENARIO}.py”
infoMsg “Recherche du fichier scénario…”
infoMsg “Chemin testé: ${SCENARIO_PYTHON}”

if [[ -f “${SCENARIO_PYTHON}” ]]; then
infoMsg “✅ Fichier scénario trouvé”
else
errorMsg “❌ Fichier scénario NOT FOUND: ${SCENARIO_PYTHON}”

```
# Rechercher dans d'autres emplacements possibles
infoMsg "Recherche dans d'autres emplacements..."

# Dans scenarios_v6 directement
ALT1="${SCENARIOS_PATH}/${NOM_SCENARIO}.py"
[[ -f "${ALT1}" ]] && infoMsg "Trouvé dans: ${ALT1}" || infoMsg "Pas dans: ${ALT1}"

# Dans un sous-dossier tests
ALT2="${SIMU_PATH}/tests/${NOM_SCENARIO}.py" 
[[ -f "${ALT2}" ]] && infoMsg "Trouvé dans: ${ALT2}" || infoMsg "Pas dans: ${ALT2}"

# Dans un sous-dossier tests avec préfixe
ALT3="${SIMU_PATH}/tests/test_${NOM_SCENARIO}.py"
[[ -f "${ALT3}" ]] && infoMsg "Trouvé dans: ${ALT3}" || infoMsg "Pas dans: ${ALT3}"

# Lister le contenu du répertoire
infoMsg "Contenu du répertoire simulateur:"
ls -la "${SIMU_PATH}/" | head -10

infoMsg "Recherche de fichiers Python contenant '${NOM_SCENARIO}':"
find "${SIMU_PATH}" -name "*${NOM_SCENARIO}*.py" 2>/dev/null || infoMsg "Aucun fichier trouvé"

die "Impossible de localiser le fichier de scénario"
```

fi

# 2. Vérifier l’environnement virtuel

VENV_PATH=”${SIMU_PATH}/venv”
infoMsg “Vérification environnement virtuel: ${VENV_PATH}”

if [[ -d “${VENV_PATH}” ]]; then
infoMsg “✅ Environnement virtuel trouvé”

```
# Test d'activation
if source "${VENV_PATH}/bin/activate" 2>/dev/null; then
    infoMsg "✅ Activation réussie"
    
    # Vérifier pytest
    if command -v pytest >/dev/null 2>&1; then
        infoMsg "✅ pytest disponible: $(which pytest)"
    else
        errorMsg "❌ pytest non trouvé dans l'environnement virtuel"
        die "pytest manquant"
    fi
else
    errorMsg "❌ Impossible d'activer l'environnement virtuel"
    die "Environnement virtuel défaillant"
fi
```

else
errorMsg “❌ Environnement virtuel introuvable: ${VENV_PATH}”
die “Environnement virtuel manquant”
fi

# 3. Test de la commande date (qui causait le problème)

infoMsg “Test de la commande date…”
if START_TIME=$(date ‘+%Y-%m-%d %H:%M:%S’ 2>/dev/null); then
infoMsg “✅ Commande date OK: ${START_TIME}”
else
errorMsg “❌ Problème avec la commande date”
START_TIME=$(date)
infoMsg “Utilisation de date simple: ${START_TIME}”
fi

# 4. Test d’exécution pytest à sec

infoMsg “=== TEST PYTEST A SEC ===”
infoMsg “Commande qui sera exécutée:”
infoMsg “pytest "${SCENARIO_PYTHON}" -x -s”

# Test de syntaxe pytest

pytest –version >/dev/null 2>&1 || die “pytest ne fonctionne pas”
infoMsg “✅ pytest fonctionne, version: $(pytest –version)”

# Test de collection des tests (sans les exécuter)

infoMsg “Test de collection des tests…”
if pytest “${SCENARIO_PYTHON}” –collect-only -q 2>/dev/null; then
infoMsg “✅ Fichier de test valide”
else
errorMsg “❌ Problème avec le fichier de test”
infoMsg “Tentative d’affichage des erreurs:”
pytest “${SCENARIO_PYTHON}” –collect-only 2>&1 || true
fi

# === EXECUTION REELLE ===

infoMsg “=== EXECUTION DU SCENARIO ===”
infoMsg “Début: ${START_TIME}”

# Exécution avec maximum de debug

set +e
pytest “${SCENARIO_PYTHON}” -x -s -v –tb=short
EXIT_CODE=$?
set -e

END_TIME=$(date ‘+%Y-%m-%d %H:%M:%S’ 2>/dev/null || date)
infoMsg “Fin: ${END_TIME}”
infoMsg “Code de retour: ${EXIT_CODE}”

case ${EXIT_CODE} in
0)
infoMsg “✅ Succès”
;;
1)
errorMsg “❌ Erreur d’initialisation (pré-API)”
;;
2)
errorMsg “❌ Erreur d’exécution”
;;
*)
errorMsg “❌ Code inattendu: ${EXIT_CODE}”
;;
esac

exit ${EXIT_CODE}